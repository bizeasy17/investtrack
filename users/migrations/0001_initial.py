# Generated by Django 3.0.2 on 2020-01-22 11:40

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='姓名')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/', verbose_name='个人头像')),
                ('location', models.CharField(blank=True, max_length=50, null=True, verbose_name='所在地区')),
                ('job_title', models.CharField(blank=True, max_length=50, null=True, verbose_name='头衔')),
                ('personal_url', models.URLField(blank=True, max_length=555, null=True, verbose_name='个人网址')),
                ('facebook_account', models.URLField(blank=True, max_length=255, null=True, verbose_name='Facebook账号')),
                ('twitter_account', models.URLField(blank=True, max_length=255, null=True, verbose_name='Twitter账号')),
                ('github_account', models.URLField(blank=True, max_length=255, null=True, verbose_name='GitHub账号')),
                ('linkedin_account', models.URLField(blank=True, max_length=255, null=True, verbose_name='LinkedIn账号')),
                ('weibo_account', models.URLField(blank=True, max_length=255, null=True, verbose_name='Weibo账号')),
                ('weixin_account', models.URLField(blank=True, max_length=255, null=True, verbose_name='Weixin账号')),
                ('qq_account', models.URLField(blank=True, max_length=255, null=True, verbose_name='QQ账号')),
                ('short_bio', models.CharField(blank=True, max_length=60, null=True, verbose_name='描述下你自己')),
                ('bio', models.CharField(blank=True, max_length=280, null=True, verbose_name='个人简介')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
