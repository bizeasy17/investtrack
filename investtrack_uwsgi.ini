[uwsgi]
#指定IP端口
http = :8080
#项目目录
chdir = /Users/hanjie/Documents/GitHub/investtrack/
#wsgi文件，在你的项目配置目录下可以找到 注意：最后输入绝对地址
wsgi-file = /Users/hanjie/Documents/GitHub/investtrack/investtrack/wsgi.py
#项目的app下的wsgi
; module = investtrack.wsgi
; virtualenv = /Users/hanjie/Documents/GitHub/venv
#sock的文件路径
#socket=/home/data/wwwroot/investtrack/uwsgi.sock
#socket =127.0.0.1:8080   #用这个形式通过nginx访问django目前没有成功，有点坑
#启用主进程
master = true
#运行进程数
processes = 4
#线程数
threads = 2
#启用线程
enable-threads = True
#设置日志目录
; daemonize = /Users/hanjie/Documents/GitHub/investtrack/uwsgi/log/uwsgi.log
; 将 uWSGI 请求 log 写入单独的 log 文件，这样做可以让log更加分离，便于查错
; 设置了此选项后，daemonize 设置的输出文件就得不到任何输出了
req-logger = file:%duwsgi/log/req.log
; 将 uWSGI stdout/stderr log 写入单独的 log 文件
; 因为设定了 req-logger ，必须同时设定 logger ，此时 daemonize 不会有任何输出
logger = file:%duwsgi/log/%n.log
#缓存大小
buffer-size = 21573
# 自动移除unix Socket和pid文件当服务停止的时候
vacuum = true
uid=root
gid=root
# 指定运行时候的pid文件，也可以用来停止进程， uwsgi --stop /var/run/uwsgi_pid.log
pidfile=/Users/hanjie/Documents/GitHub/investtrack/uwsgi/uwsgi_pid
#指定静态文件
static-map=/static=/Users/hanjie/Documents/GitHub/investtrack/collectedstatic